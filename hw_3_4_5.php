<?php
// 3. Дан код:
// Что он выведет на каждом шаге? Почему?

class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}

$a1 = new A();
$a2 = new A();
$a1->foo();
$a2->foo();
$a1->foo();
$a2->foo();

// 1234
// слово static, написанное перед присваиванием значения локальной переменной, приводит к следующим эффектам:
// Присваивание выполняется только один раз, при первом вызове функции
// Значение помеченной таким образом переменной сохраняется после окончания работы функции
// При последующих вызовах функции вместо присваивания переменная получает сохраненное ранее значение

//в нашем случае даже если будет сто объектов этого класса, метод будет существовать лишь в одном экземпляре,
//просто при каждом вызове в него будет пробрасываться разный $this.
// по этому мы и получили сперва 1, далее второй вызов берет значение первого вызова
// те значение=1 и выполняет ++$x, что дает нам в результате 2 и так же еще два раза

//наследование класса (и метода) приводит к тому, что всё-таки создается новый метод 
// и код ниже выдаст нам результат = 1122

// class A {
//     public function foo() {
//         static $x = 0;
//         echo ++$x;
//     }
// }
// class B extends A {
// }
// $a1 = new A();
// $b1 = new B();
// $a1->foo(); 
// $b1->foo(); 
// $a1->foo(); 
// $b1->foo();



//5. *Дан код:
//Что он выведет на каждом шаге? Почему?

// class A {
//     public function foo() {
//         static $x = 0;
//         echo ++$x;
//     }
// }
// class B extends A {
// }
// $a1 = new A; //отличие от предыдущего кода - это отсутствие скобок
// $b1 = new B; //отличие от предыдущего кода - это отсутствие скобок
// $a1->foo(); 
// $b1->foo(); 
// $a1->foo(); 
// $b1->foo(); 

//Код выведет 1122